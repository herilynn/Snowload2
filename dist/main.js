/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("window.addEventListener('load', () => {\n  const canvas = document.getElementById('backgroundCanvas');\n  const ctx = canvas.getContext('2d');\n  const snowballCanvas = document.getElementById('snowballCanvas');\n  const snowballCtx = snowballCanvas.getContext('2d');\n  const countdown = document.getElementById('timer');\n  const target = new Date('January 1, 2024 00:00:00').getTime();\n  function updateTimer() {\n    const currentTime = new Date().getTime();\n    const timeRemaining = target - currentTime;\n    const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));\n    const hours = Math.floor(timeRemaining % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    const minutes = Math.floor(timeRemaining % (1000 * 60 * 60) / (1000 * 60));\n    const seconds = Math.floor(timeRemaining % (1000 * 60) / 1000);\n    countdown.innerHTML = `Time until New Years: ${days}d ${hours}h ${minutes}m ${seconds}s`;\n  }\n\n  // Update the timer every second\n  setInterval(updateTimer, 1000);\n  snowballCanvas.width = snowballCanvas.offsetWidth;\n  snowballCanvas.height = snowballCanvas.offsetHeight;\n  const snowballRadius = 30;\n  const snowballY = snowballCanvas.height - snowballRadius;\n  const elf = [new Image(), new Image(), new Image(), new Image(), new Image(), new Image()];\n  elf[0].src = \"src/assets/link1.png\";\n  elf[1].src = \"src/assets/link2.png\";\n  elf[2].src = \"src/assets/link3.png\";\n  elf[3].src = \"src/assets/link4.png\";\n  elf[4].src = \"src/assets/link5.png\";\n  elf[5].src = \"src/assets/link6.png\";\n  function animateElf(currentTime) {\n    for (let i = 0; i < elf.length; i++) {\n      const tempElf = i * 50;\n      snowballCtx.drawImage(elf[i], tempElf, snowballY - 50, 50, 50);\n    }\n    requestAnimationFrame(animateElf);\n  }\n  function updateSnowballPosition() {\n    const currentTime = new Date();\n    const dailyMinutes = 24 * 60;\n    const x = (currentTime.getHours() * 60 + currentTime.getMinutes()) * (snowballCanvas.width / dailyMinutes);\n    const snowballSize = snowballRadius + x / snowballCanvas.width * 50;\n    snowballCtx.clearRect(0, 0, snowballCanvas.width, snowballCanvas.height);\n    snowballCtx.beginPath();\n    snowballCtx.arc(x, snowballY, snowballSize, 0, 2 * Math.PI);\n    snowballCtx.fillStyle = 'lightblue';\n    snowballCtx.fill();\n    snowballCtx.stroke();\n    requestAnimationFrame(updateSnowballPosition);\n  }\n  updateSnowballPosition();\n  // animateElf()\n\n  //\n\n  const items = [];\n  const maxItems = 10;\n  let timer = 0;\n  let lastUpdateTime = 0;\n\n  // Preload images\n  const snowflakes = [new Image(),\n  // Original image\n  new Image(),\n  // Image at 90 degrees\n  new Image(),\n  // Image at 180 degrees\n  new Image() // Image at 270 degrees\n  ];\n  snowflakes[0].src = \"src/assets/loadingSnowflake.png\";\n  snowflakes[1].src = \"src/assets/loadingSnowflake90.png\";\n  snowflakes[2].src = \"src/assets/loadingSnowflake180.png\";\n  snowflakes[3].src = \"src/assets/loadingSnowflake270.png\";\n  function clear() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  function animate(currentTime) {\n    const diffTime = currentTime - lastUpdateTime;\n    if (diffTime > 120) {\n      //determines how quickly image updates\n      lastUpdateTime = currentTime;\n      clear();\n      generateItems();\n      updateItems();\n    }\n    requestAnimationFrame(animate);\n  }\n  function Item(x, y, speed) {\n    this.x = x;\n    this.y = y;\n    this.speed = speed;\n    this.frameIndex = 0; // Current frame index for rotation\n  }\n  Item.prototype.update = function () {\n    this.y += this.speed;\n    this.frameIndex = (this.frameIndex + 1) % 4; // Cycle through frames\n  };\n  Item.prototype.draw = function () {\n    ctx.drawImage(snowflakes[this.frameIndex], this.x, this.y, 33, 33);\n  };\n  function generateItems() {\n    clear();\n    timer++;\n    if (timer % 10 === 0 || items.length < maxItems) {\n      const x = Math.random() * (canvas.width - 20);\n      const speed = Math.random() * 0.5 + 1;\n      const item = new Item(x, 0, speed);\n      items.push(item);\n    }\n    if (timer === 200) {\n      timer = 0;\n    }\n  }\n  function updateItems() {\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      item.update();\n      item.draw();\n    }\n  }\n  animate(0);\n  // animateSnowball()\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbm93bG9hZDIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;